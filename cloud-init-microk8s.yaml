#cloud-config
package_update: true
package_upgrade: true

runcmd:
 - [ sh, -c, echo "=========Installing Microk8s (latest version)=========" ] 
 - sudo snap install microk8s --channel=latest/stable --classic
 - sudo usermod -a -G microk8s ubuntu
 - echo "alias k=microk8s.kubectl" >> /home/ubuntu/.bashrc
 - microk8s enable dashboard dns registry istio
 - echo "Writing kubeconfig file, just in case"
 - microk8s config > /home/ubuntu/.kube/config

 - [ sh, -c, echo "=========What did we just install=========" ] 
 - [ sh, -c, echo "Space on root folder:" ] 
 - [ sh, -c, df -h / ] 
 - [ sh, -c, echo "Testing Microk8s:" ] 
 - [ sh, -c, microk8s.kubectl version  ] 

final_message: "The system is finally up, after $UPTIME seconds"

# Some extra tips, added later. Do this so your load balancers will have external IPs. 
# 1) Get the IP of your host where microk8s is running. Use command 'ip addr' or 'ifconfig'. It should be the ip address of the eth0 network interface.
# 2) Add some extra ips to your host in which microk8s is running. Say eth0 IP is '172.22.208.91'. Add a few more with the commands below. 
# sudo ip addr add 172.22.208.93/24 dev eth0
# sudo ip addr add 172.22.208.94/24 dev eth0
# sudo ip addr add 172.22.208.95/24 dev eth0
# sudo ip addr add 172.22.208.96/24 dev eth0
# sudo ip addr add 172.22.208.97/24 dev eth0
# sudo ip addr add 172.22.208.98/24 dev eth0
# sudo ip addr add 172.22.208.99/24 dev eth0
# sudo ip addr add 172.22.208.100/24 dev eth0
# 3) Now enable metallb add-on, with command 'microk8s enable metallb'
# 4) While enabling metalldb, it will ask for an IP range. In this example, the IP range would be '172.22.208.91-172.22.208.100'.
# If you need to edit the address pool for metallb after adding it, use this command: k -n metallb-system edit ipaddresspools.metallb.io/default-addresspool  

# Where are the logs?
# Cloud-init uses two files to log to:
# /var/log/cloud-init-output.log: captures the output from each stage of cloud-init when it runs
# /var/log/cloud-init.log: very detailed log with debugging output, detailing each action taken
# /run/cloud-init: contains logs about how cloud-init decided to enable or disable itself, as well as what platforms/datasources were detected. These logs are most useful when trying to determine what cloud-init ran or did not run.

# How to launch it: 
# multipass launch --name highlander --cloud-init ./cloud-init-microk8s.yaml --cpus 4 --memory 4G --disk 10G
# multipass stop highlander
# multipass delete highlander
# multipass purge

